---
---
# DocStrands

When documenting your functions, you might find yourself documenting the same parameters over and over again.
DocStrands provides a framework for re-using docstring information.

## Example

Consider the following snippet from a hypothetical role playing video game.
We annotate both source and destination functions with `@docstring`, and then copy docstring components using methods such as `.copy_params()`:

```{python}
from docstrands import docstring

class Weapon:
    @docstring("google")
    def calculate_damage(self, monster: str, critical_chance: float) -> int:
        """
        Calculates the damage this weapon deals.

        Args:
            monster: The monster being attacked. Its weaknesses will be factored into the calculation.
            critical_chance: Probability of a critical hit. Derived from player traits.

        Returns:
            The amount of HP (hit points) the monster will lose
        """
        pass

type Element = Literal["earth", "air", "fire", "water"]

class Wand(Weapon):
    @Weapon.calculate_damage.copy_synopsis()
    @Weapon.calculate_damage.copy_params("monster", "critical_chance")
    @Weapon.calculate_damage.copy_returns()
    @docstring("google")
    def calculate_damage(self, monster: str, critical_chance: float, element: str) -> float:
        """
        Args:
            element: Name of the element used in the attack. If the monster is weak to that element, the attack will do bonus damage.
        """
```
```{python}
help(Wand.calculate_damage)
```

## Alternatives

There are other solutions to this problem.

We could choose to not use DocStrands at all, but then `Wand.calculate_damage` would have an incomplete docstring:
```{python}
class Wand(Weapon):
    def calculate_damage(self, monster: str, critical_chance: float, element: str) -> float:
        """
        Args:
            element: The element used in the attack. If the monster is weak to that element, the attack will do bonus damage.
        """
help(Wand.calculate_damage)
```

We could also copy the entire docstring from `Weapon` and add it to `Wand` with the extra `element` parameter, but then we would have to keep both docstrings in sync.

Finally, it is possible to link between docstrings using cross references (e.g. in [Sphinx](https://www.sphinx-doc.org/en/master/usage/referencing.html) or [`mkdocstrings`](https://mkdocstrings.github.io/usage/#cross-references)).
However, this only shows up in your final HTML documentation: standard Python functions like `help()` don't understand this.
Also, it can be frustrating to read documentation that sends you to several other pages just to understand one function.
In contrast, DocStrands keeps everything all in one place.