---
---
# DocStrands

When documenting your functions, you might find yourself documenting the same parameters over and over again.
DocStrands provides a framework for re-using docstring information.

## Example

Consider the following snippet from a hypothetical HTTP library.
We annotate both source and destination functions with `@docstring`, and then copy docstring components using methods such as `.copy_params()`:

```{python}
from docstrands import docstring

@docstring("google")
def get(url: str, headers: dict[str, str], params: dict[str, str]) -> str:
    """
    Makes an HTTP GET request

    Params:
        url: Path to the resource to request
        headers: Dictionary of HTTP headers. Keys will be automatically capitalised.
        params: Dictionary of query parameters which will be URL encoded.

    Returns:
        The raw HTTP response body as a string.
    """

@get.copy_params("url", "headers")
@get.copy_returns()
@docstring("google")
def post(url: str, headers: dict[str, str], body: bytes) -> str:
    """
    Makes an HTTP POST request.

    Params:
        body: POST body. Text such as JSON will have to be encoded beforehand.
    """
```

We can check that Python understands this by calling `help`:
```{python}
help(post)
```

## Alternatives

There are other solutions to this problem.

We could choose to not use DocStrands at all, but then `post` would have an incomplete docstring:

We could also copy the entire docstring from `Weapon` and add it to `Wand` with the extra `element` parameter, but then we would have to keep both docstrings in sync.

Finally, it is possible to link between docstrings using cross references (e.g. in [Sphinx](https://www.sphinx-doc.org/en/master/usage/referencing.html) or [`mkdocstrings`](https://mkdocstrings.github.io/usage/#cross-references)).
However, this only shows up in your final HTML documentation: standard Python functions like `help()` don't understand this.
Also, it can be frustrating to read documentation that sends you to several other pages just to understand one function.
In contrast, DocStrands keeps everything all in one place.